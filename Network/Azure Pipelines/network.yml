# This pipeline deploys the network resources in Azure using Bicep templates and fetches secrets from Azure Key Vault.
# It includes stages for linting, validation, and deployment of the resources.
trigger: none
pr: none

pool:
    vmImage: 'ubuntu-latest'
 
parameters:
   - name : location
     displayName: Location of Deployment
     default: westus
   - name : resourceGroupName
     displayName: Keyvault RG Name
   - name : keyVaultName
     displayName: Key Vault Name
   - name : subscriptionID
     displayName: Subscription ID
   - name : tenantName
     displayName: Select Secrets based on Tenant
     default: Main
     values:
      - Main
      - Remote
   - name : purpose
     displayName: Purpose of Deployment
     default: Vnet-Hub-Connection
     values:
      - Main Network Deployment
      - Remote Network Deployment
      - Vnet-Hub-Connection

variables:
- name: environment
  value: 'Production'
- name: parameterFileName
  ${{ if eq(parameters.purpose, 'Vnet-Hub-Connection') }}:
    value: "network.remote.vnetConnection.parameters.json"
  ${{ elseif eq(parameters.purpose, 'Main Network Deployment') }}:
    value: "network.main.parameters.json"
  ${{ elseif eq(parameters.purpose, 'Remote Network Deployment') }}:
    value: "network.remote.parameters.json"
- name: bicepFileName
  ${{ if eq(parameters.purpose, 'Vnet-Hub-Connection') }}:
    value: "VhubRemoteVnetMapping.bicep"
  ${{ elseif eq(parameters.purpose, 'Main Network Deployment') }}:
    value: "network.bicep"
  ${{ elseif eq(parameters.purpose, 'Remote Network Deployment') }}:
    value: "RemoteVnetSubnet.bicep"

name: 'NETWORK_DEPLOYMENT_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)'
stages:
################ Linting and Validation ########################################
- stage: Build
  displayName: Build bicep code
  jobs:
        - job:
          displayName: Build bicep code
          steps:
          - checkout: self
          - pwsh: |
              Get-ChildItem -Path $(Build.SourcesDirectory) -Filter *.bicep | foreach { az bicep build -f $_.FullName }
            displayName: 'Run Bicep linter'   
          
- stage: AkvSecret
  displayName: Fetch Key Vault Secrets
  jobs:
    - job: akvSecretdeploy
      displayName: Fetch Secrets from Keyvault
      steps:
      - checkout: self
      - pwsh: |
             Install-Module -Name Az -Repository PSGallery -Force
             Import-Module Az.Accounts
      - task: AzurePowerShell@5
        name: akvsecretgenerate
        inputs:
          azureSubscription: 'Service-Connection-Name' #Update to a service connection that has access to the Key Vault
          ScriptType: 'InlineScript'
          Inline: |
            $resourceGroupName = "${{ parameters.resourceGroupName }}"
            $keyVaultName =  "${{ parameters.keyVaultName }}"               
            $clientIDSecretName = "clientid-${{ parameters.tenantName }}"
            $clientSecretSecretName = "clientsecret-${{ parameters.tenantName }}"
            $tenantIDSecretName = "tenantid-${{ parameters.tenantName }}"     
            # Authenticate to Azure and fetch secrets from Key Vault
            $keyVaultSecrets = @{
                "clientid" = Get-AzKeyVaultSecret -VaultName $keyVaultName -Name $clientIDSecretName -AsPlainText   
                "clientsecret" = Get-AzKeyVaultSecret -VaultName $keyVaultName -Name $clientSecretSecretName -AsPlainText   
                "tenantid" = Get-AzKeyVaultSecret -VaultName $keyVaultName -Name $tenantIDSecretName -AsPlainText   
            }  
            $clientid =  $($keyVaultSecrets['clientid'])
            $clientsecret = $($keyVaultSecrets['clientsecret'])
            $tenantid =  $($keyVaultSecrets['tenantid'])  
            Write-Host "##vso[task.setvariable variable=clientid;isOutput=true]$clientid"
            Write-Host "##vso[task.setvariable variable=clientsecret;isOutput=true]$clientsecret"
            Write-Host "##vso[task.setvariable variable=tenantid;isOutput=true]$tenantid"
          FailOnStandardError: true
          azurePowerShellVersion: 'LatestVersion'
      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)'
          targetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)
          artifactName: infratenantlevel
- stage: Validate
  displayName: Run What-if Command
  dependsOn:
    - AkvSecret
  jobs: 
       - job: Validate_Deployment
         variables:
            clientid: $[stageDependencies.AkvSecret.akvSecretdeploy.outputs['akvsecretgenerate.clientid']]
            clientsecret: $[stageDependencies.AkvSecret.akvSecretdeploy.outputs['akvsecretgenerate.clientsecret']]
            tenantid: $[stageDependencies.AkvSecret.akvSecretdeploy.outputs['akvsecretgenerate.tenantid']]
         displayName:  'Validate Deployments'
         steps:
            - task: DownloadBuildArtifacts@0
              inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: 'infratenantlevel'
                  downloadPath: '$(System.ArtifactsDirectory)'            
            - task: Bash@3
              displayName: 'Validate deployment'
              enabled: true
              inputs:
                targetType: 'inline'
                script: |             
                  az --version
                  az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
                  az account set --name ${{ parameters.subscriptionID }}
                  az deployment sub what-if --name ${{ parameters.subscriptionID }}-whatif --location ${{parameters.location}}  --template-file ./Network/$(bicepFileName) --parameters ./Network/parameters/$(parameterFileName)
- stage: Deploy
  displayName: Deploy Network Resources
  dependsOn:
    - Validate
    - AkvSecret
  variables:
    clientid: $[stageDependencies.AkvSecret.akvSecretdeploy.outputs['akvsecretgenerate.clientid']]
    clientsecret: $[stageDependencies.AkvSecret.akvSecretdeploy.outputs['akvsecretgenerate.clientsecret']]
    tenantid: $[stageDependencies.AkvSecret.akvSecretdeploy.outputs['akvsecretgenerate.tenantid']]
  jobs:
  - deployment: deploy
    environment: $(environment)
    displayName:  'Deploy Network Resources'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: DownloadBuildArtifacts@0
              inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: 'infratenantlevel'
                  downloadPath: '$(System.ArtifactsDirectory)'          
            - task: Bash@3
              displayName: 'Deployment'
              enabled: true
              inputs:
                targetType: 'inline'
                script: |             
                  az --version
                  az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
                  az account set --name ${{ parameters.subscriptionID }}
                  az deployment sub create --name ${{ parameters.subscriptionID }}-network1 --location ${{parameters.location}}  --template-file ./Network/$(bicepFileName) --parameters ./Network/parameters/$(parameterFileName)